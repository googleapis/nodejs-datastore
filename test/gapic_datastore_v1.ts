// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as datastoreModule from '../src';

import {protobuf, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.DatastoreClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = datastoreModule.v1.DatastoreClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = datastoreModule.v1.DatastoreClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = datastoreModule.v1.DatastoreClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new datastoreModule.v1.DatastoreClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new datastoreModule.v1.DatastoreClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.datastoreStub, undefined);
      await client.initialize();
      assert(client.datastoreStub);
    });

    it('has close method for the initialized client', done => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.datastoreStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.datastoreStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('lookup', () => {
    it('invokes lookup without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.LookupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.LookupRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.LookupResponse()
      );
      client.innerApiCalls.lookup = stubSimpleCall(expectedResponse);
      const [response] = await client.lookup(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.lookup as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookup without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.LookupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.LookupRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.LookupResponse()
      );
      client.innerApiCalls.lookup =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.lookup(
          request,
          (
            err?: Error | null,
            result?: protos.google.datastore.v1.ILookupResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.lookup as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookup with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.LookupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.LookupRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.lookup = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.lookup(request), expectedError);
      const actualRequest = (client.innerApiCalls.lookup as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.lookup as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes lookup with closed client', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.LookupRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.LookupRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.lookup(request), expectedError);
    });
  });

  describe('runQuery', () => {
    it('invokes runQuery without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.RunQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.RunQueryRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.RunQueryResponse()
      );
      client.innerApiCalls.runQuery = stubSimpleCall(expectedResponse);
      const [response] = await client.runQuery(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runQuery without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.RunQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.RunQueryRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.RunQueryResponse()
      );
      client.innerApiCalls.runQuery =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.runQuery(
          request,
          (
            err?: Error | null,
            result?: protos.google.datastore.v1.IRunQueryResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runQuery with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.RunQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.RunQueryRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.runQuery = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.runQuery(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runQuery as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runQuery with closed client', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.RunQueryRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.RunQueryRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.runQuery(request), expectedError);
    });
  });

  describe('beginTransaction', () => {
    it('invokes beginTransaction without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.BeginTransactionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.BeginTransactionRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.BeginTransactionResponse()
      );
      client.innerApiCalls.beginTransaction = stubSimpleCall(expectedResponse);
      const [response] = await client.beginTransaction(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes beginTransaction without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.BeginTransactionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.BeginTransactionRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.BeginTransactionResponse()
      );
      client.innerApiCalls.beginTransaction =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.beginTransaction(
          request,
          (
            err?: Error | null,
            result?: protos.google.datastore.v1.IBeginTransactionResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes beginTransaction with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.BeginTransactionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.BeginTransactionRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.beginTransaction = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.beginTransaction(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.beginTransaction as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes beginTransaction with closed client', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.BeginTransactionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.BeginTransactionRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.beginTransaction(request), expectedError);
    });
  });

  describe('commit', () => {
    it('invokes commit without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.CommitRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.CommitRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.CommitResponse()
      );
      client.innerApiCalls.commit = stubSimpleCall(expectedResponse);
      const [response] = await client.commit(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.commit as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.commit as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes commit without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.CommitRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.CommitRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.CommitResponse()
      );
      client.innerApiCalls.commit =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.commit(
          request,
          (
            err?: Error | null,
            result?: protos.google.datastore.v1.ICommitResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (client.innerApiCalls.commit as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.commit as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes commit with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.CommitRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.CommitRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.commit = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.commit(request), expectedError);
      const actualRequest = (client.innerApiCalls.commit as SinonStub).getCall(
        0
      ).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.commit as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes commit with closed client', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.CommitRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.CommitRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.commit(request), expectedError);
    });
  });

  describe('rollback', () => {
    it('invokes rollback without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.RollbackRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.RollbackRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.RollbackResponse()
      );
      client.innerApiCalls.rollback = stubSimpleCall(expectedResponse);
      const [response] = await client.rollback(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes rollback without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.RollbackRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.RollbackRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.RollbackResponse()
      );
      client.innerApiCalls.rollback =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.rollback(
          request,
          (
            err?: Error | null,
            result?: protos.google.datastore.v1.IRollbackResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes rollback with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.RollbackRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.RollbackRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.rollback = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.rollback(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.rollback as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes rollback with closed client', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.RollbackRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.RollbackRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.rollback(request), expectedError);
    });
  });

  describe('allocateIds', () => {
    it('invokes allocateIds without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.AllocateIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.AllocateIdsRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.AllocateIdsResponse()
      );
      client.innerApiCalls.allocateIds = stubSimpleCall(expectedResponse);
      const [response] = await client.allocateIds(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.allocateIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.allocateIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes allocateIds without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.AllocateIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.AllocateIdsRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.AllocateIdsResponse()
      );
      client.innerApiCalls.allocateIds =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.allocateIds(
          request,
          (
            err?: Error | null,
            result?: protos.google.datastore.v1.IAllocateIdsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.allocateIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.allocateIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes allocateIds with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.AllocateIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.AllocateIdsRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.allocateIds = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.allocateIds(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.allocateIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.allocateIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes allocateIds with closed client', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.AllocateIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.AllocateIdsRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.allocateIds(request), expectedError);
    });
  });

  describe('reserveIds', () => {
    it('invokes reserveIds without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.ReserveIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.ReserveIdsRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.ReserveIdsResponse()
      );
      client.innerApiCalls.reserveIds = stubSimpleCall(expectedResponse);
      const [response] = await client.reserveIds(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.reserveIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.reserveIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes reserveIds without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.ReserveIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.ReserveIdsRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.datastore.v1.ReserveIdsResponse()
      );
      client.innerApiCalls.reserveIds =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.reserveIds(
          request,
          (
            err?: Error | null,
            result?: protos.google.datastore.v1.IReserveIdsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.reserveIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.reserveIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes reserveIds with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.ReserveIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.ReserveIdsRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedHeaderRequestParams = `project_id=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.reserveIds = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.reserveIds(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.reserveIds as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.reserveIds as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes reserveIds with closed client', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.datastore.v1.ReserveIdsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.datastore.v1.ReserveIdsRequest',
        ['projectId']
      );
      request.projectId = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.reserveIds(request), expectedError);
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new datastoreModule.v1.DatastoreClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });
});
