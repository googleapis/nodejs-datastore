/*!
 * Copyright 2024 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Query } from "./query";

enum DistanceMeasure {
  EUCLIDEAN = 1,
  COSINE = 2,
  DOT_PRODUCT = 3,
}

/**
 * Represent a vector type in Datastore documents.
 */
export class VectorValue {
  private readonly _values: number[];
  /**
   * @private
   * @internal
   */
  constructor(values: number[] | undefined) {
    // Making a copy of the parameter.
    this._values = (values || []).map(n => n);
  }

  /**
   * Returns a copy of the raw number array form of the vector.
   */
  public toArray(): number[] {
    return this._values.map(n => n);
  }

  /**
   * @private
   * @internal
   */
  _toProto(serializer: Serializer): api.IValue {
    return serializer.encodeVector(this._values);
  }

  /**
   * @private
   * @internal
   */
  static _fromProto(valueArray: api.IValue): VectorValue {
    const values = valueArray.arrayValue?.values?.map(v => {
      return v.doubleValue!;
    });
    return new VectorValue(values);
  }

  /**
   * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.
   */
  isEqual(other: VectorValue): boolean {
    return isPrimitiveArrayEqual(this._values, other._values);
  }
}

/**
 * A query that finds the document whose vector fields are closest to a certain vector.
 */
export class VectorQuery {
  private _query: Query;
  private _options: VectorQueryOptions;

  constructor(_query: Query, _options: VectorQueryOptions) {
    this._query = _query;
    this._options = _options;
  };

  /** The query whose results participants in the distance search. */
  get query(): Query {
    return this._query;
  }

}

/**
 * Specifies the behavior of the {@link VectorQuery} generated by a call to {@link Query.findNearest}.
 */
export interface VectorQueryOptions {
  /**
   * A string specifying the vector field to search on.
   */
  vectorField: string;

  /**
   * The {@link VectorValue} used to measure the distance from `vectorField` values in the documents.
   */
  queryVector: VectorValue | Array<number>;

  /**
   * Specifies the upper bound of documents to return, must be a positive integer with a maximum value of 1000.
   */
  limit: number;

  /**
   * Specifies what type of distance is calculated when performing the query.
   */
  distanceMeasure: DistanceMeasure;

  /**
   * Optionally specifies the name of a field that will be set on each returned DocumentSnapshot,
   * which will contain the computed distance for the document.
   */
  distanceResultField?: string;

  /**
   * Specifies a threshold for which no less similar documents will be returned. The behavior
   * of the specified `distanceMeasure` will affect the meaning of the distance threshold.
   *
   *  - For `distanceMeasure: "EUCLIDEAN"`, the meaning of `distanceThreshold` is:
   *     SELECT docs WHERE euclidean_distance <= distanceThreshold
   *  - For `distanceMeasure: "COSINE"`, the meaning of `distanceThreshold` is:
   *     SELECT docs WHERE cosine_distance <= distanceThreshold
   *  - For `distanceMeasure: "DOT_PRODUCT"`, the meaning of `distanceThreshold` is:
   *     SELECT docs WHERE dot_product_distance >= distanceThreshold
   */
  distanceThreshold?: number;
}
